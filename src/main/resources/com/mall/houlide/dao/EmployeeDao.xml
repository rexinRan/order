<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mall.houlide.dao.EmployeeDao">
    <resultMap id="BaseResultMap" type="com.mall.houlide.bean.Employee">
        <id column="Employee_ID" property="employeeId" jdbcType="INTEGER"/>
        <result column="Dept_ID" property="deptId" jdbcType="INTEGER"/>
        <result column="Emp_Name" property="empName" jdbcType="VARCHAR"/>
        <result column="Duty" property="duty" jdbcType="VARCHAR"/>
        <result column="Gender" property="gender" jdbcType="VARCHAR"/>
        <result column="BirthDate" property="birthdate" jdbcType="TIMESTAMP"/>
        <result column="HireDate" property="hiredate" jdbcType="TIMESTAMP"/>
        <result column="MatureDate" property="maturedate" jdbcType="TIMESTAMP"/>
        <result column="IdentityCard" property="identitycard" jdbcType="VARCHAR"/>
        <result column="Address" property="address" jdbcType="VARCHAR"/>
        <result column="Phone" property="phone" jdbcType="VARCHAR"/>
        <result column="Email" property="email" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        <if test="fields == null">
            Employee_ID, Dept_ID, Emp_Name, Duty, Gender, BirthDate, HireDate, MatureDate, IdentityCard,
            Address, Phone, Email
        </if>
        <if test="fields != null">
            ${fields}
        </if>
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.mall.houlide.bean.EmployeeQuery">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from employee
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="startRow != null">
            limit #{startRow} , #{pageSize}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        Employee_ID,Dept_ID,Emp_Name,Duty,Gender,BirthDate,HireDate,MatureDate,IdentityCard,Address,Phone,Email
        from employee
        where Employee_ID = #{employeeId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from employee
        where Employee_ID = #{employeeId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.mall.houlide.bean.EmployeeQuery">
        delete from employee
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.mall.houlide.bean.Employee">
        insert into employee (Employee_ID, Dept_ID, Emp_Name,
        Duty, Gender, BirthDate,
        HireDate, MatureDate, IdentityCard,
        Address, Phone, Email
        )
        values (#{employeeId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{empName,jdbcType=VARCHAR},
        #{duty,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, #{birthdate,jdbcType=TIMESTAMP},
        #{hiredate,jdbcType=TIMESTAMP}, #{maturedate,jdbcType=TIMESTAMP}, #{identitycard,jdbcType=VARCHAR},
        #{address,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.mall.houlide.bean.Employee">
        insert into employee
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="employeeId != null">
                Employee_ID,
            </if>
            <if test="deptId != null">
                Dept_ID,
            </if>
            <if test="empName != null">
                Emp_Name,
            </if>
            <if test="duty != null">
                Duty,
            </if>
            <if test="gender != null">
                Gender,
            </if>
            <if test="birthdate != null">
                BirthDate,
            </if>
            <if test="hiredate != null">
                HireDate,
            </if>
            <if test="maturedate != null">
                MatureDate,
            </if>
            <if test="identitycard != null">
                IdentityCard,
            </if>
            <if test="address != null">
                Address,
            </if>
            <if test="phone != null">
                Phone,
            </if>
            <if test="email != null">
                Email,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="employeeId != null">
                #{employeeId,jdbcType=INTEGER},
            </if>
            <if test="deptId != null">
                #{deptId,jdbcType=INTEGER},
            </if>
            <if test="empName != null">
                #{empName,jdbcType=VARCHAR},
            </if>
            <if test="duty != null">
                #{duty,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=VARCHAR},
            </if>
            <if test="birthdate != null">
                #{birthdate,jdbcType=TIMESTAMP},
            </if>
            <if test="hiredate != null">
                #{hiredate,jdbcType=TIMESTAMP},
            </if>
            <if test="maturedate != null">
                #{maturedate,jdbcType=TIMESTAMP},
            </if>
            <if test="identitycard != null">
                #{identitycard,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.mall.houlide.bean.EmployeeQuery" resultType="java.lang.Integer">
        select count(*) from employee
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update employee
        <set>
            <if test="record.employeeId != null">
                Employee_ID = #{record.employeeId,jdbcType=INTEGER},
            </if>
            <if test="record.deptId != null">
                Dept_ID = #{record.deptId,jdbcType=INTEGER},
            </if>
            <if test="record.empName != null">
                Emp_Name = #{record.empName,jdbcType=VARCHAR},
            </if>
            <if test="record.duty != null">
                Duty = #{record.duty,jdbcType=VARCHAR},
            </if>
            <if test="record.gender != null">
                Gender = #{record.gender,jdbcType=VARCHAR},
            </if>
            <if test="record.birthdate != null">
                BirthDate = #{record.birthdate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.hiredate != null">
                HireDate = #{record.hiredate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.maturedate != null">
                MatureDate = #{record.maturedate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.identitycard != null">
                IdentityCard = #{record.identitycard,jdbcType=VARCHAR},
            </if>
            <if test="record.address != null">
                Address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.phone != null">
                Phone = #{record.phone,jdbcType=VARCHAR},
            </if>
            <if test="record.email != null">
                Email = #{record.email,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update employee
        set Employee_ID = #{record.employeeId,jdbcType=INTEGER},
        Dept_ID = #{record.deptId,jdbcType=INTEGER},
        Emp_Name = #{record.empName,jdbcType=VARCHAR},
        Duty = #{record.duty,jdbcType=VARCHAR},
        Gender = #{record.gender,jdbcType=VARCHAR},
        BirthDate = #{record.birthdate,jdbcType=TIMESTAMP},
        HireDate = #{record.hiredate,jdbcType=TIMESTAMP},
        MatureDate = #{record.maturedate,jdbcType=TIMESTAMP},
        IdentityCard = #{record.identitycard,jdbcType=VARCHAR},
        Address = #{record.address,jdbcType=VARCHAR},
        Phone = #{record.phone,jdbcType=VARCHAR},
        Email = #{record.email,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.mall.houlide.bean.Employee">
        update employee
        <set>
            <if test="deptId != null">
                Dept_ID = #{deptId,jdbcType=INTEGER},
            </if>
            <if test="empName != null">
                Emp_Name = #{empName,jdbcType=VARCHAR},
            </if>
            <if test="duty != null">
                Duty = #{duty,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                Gender = #{gender,jdbcType=VARCHAR},
            </if>
            <if test="birthdate != null">
                BirthDate = #{birthdate,jdbcType=TIMESTAMP},
            </if>
            <if test="hiredate != null">
                HireDate = #{hiredate,jdbcType=TIMESTAMP},
            </if>
            <if test="maturedate != null">
                MatureDate = #{maturedate,jdbcType=TIMESTAMP},
            </if>
            <if test="identitycard != null">
                IdentityCard = #{identitycard,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                Address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                Phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                Email = #{email,jdbcType=VARCHAR},
            </if>
        </set>
        where Employee_ID = #{employeeId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.mall.houlide.bean.Employee">
        update employee
        set Dept_ID = #{deptId,jdbcType=INTEGER},
        Emp_Name = #{empName,jdbcType=VARCHAR},
        Duty = #{duty,jdbcType=VARCHAR},
        Gender = #{gender,jdbcType=VARCHAR},
        BirthDate = #{birthdate,jdbcType=TIMESTAMP},
        HireDate = #{hiredate,jdbcType=TIMESTAMP},
        MatureDate = #{maturedate,jdbcType=TIMESTAMP},
        IdentityCard = #{identitycard,jdbcType=VARCHAR},
        Address = #{address,jdbcType=VARCHAR},
        Phone = #{phone,jdbcType=VARCHAR},
        Email = #{email,jdbcType=VARCHAR}
        where Employee_ID = #{employeeId,jdbcType=INTEGER}
    </update>
</mapper>